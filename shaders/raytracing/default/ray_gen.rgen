#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_flags_primitive_culling : enable
#extension GL_GOOGLE_include_directive : enable

#include "payload.glsl"
#include "../common.glsl"
#include "../interface.glsl"
#include "../random.glsl"
#include "../lights.glsl"
#include "../environment.glsl"
#include "../bsdf.glsl"
#include "../restir.glsl"
#include "../environment.glsl"
#include "../output.glsl"

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = DESCRIPTOR_SET_FRAMEWORK, binding = DESCRIPTOR_BINDING_ACCELERATION_STRUCTURE) uniform accelerationStructureEXT as;
layout(set = DESCRIPTOR_SET_FRAMEWORK, binding = 1) uniform RayGenerationData {
    CameraData camera;
} raygen_data;

vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x = radians(raygen_data.camera.fov_x);

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y = fov_x * aspect_ratio;

    float fov_x_half = fov_x / 2.0;
    float fov_y_half = fov_y / 2.0;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}

void main() {
    uint sample_count = push_constants.constants.sample_count;
    uint pixel_index = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * push_constants.constants.image_extent.x;

    uint restir_index = push_constants.constants.frame % 2;
    uint restir_index_previous = (restir_index + 1) % 2;

    // clear restir reservoirs when camera is moved
    // if (sample_count == 1) {
        // clear_reservoir(restir_reservoirs[restir_index].reservoirs[pixel_index]);
        // clear_reservoir(restir_reservoirs[restir_index_previous].reservoirs[pixel_index]);
    // }

    payload.seed = hash_combine(gl_LaunchIDEXT.x, hash_combine(gl_LaunchIDEXT.y, hash_combine(sample_count, hash_combine(push_constants.constants.frame, hash_init))));
    payload.pixel_index = pixel_index;
    payload.restir_index = restir_index;

    vec3 ray_origin = raygen_data.camera.origin.xyz;
    vec3 ray_direction;

    vec3 multisample_color = vec3(0.0);

    for (uint frame_sample = 0; frame_sample < push_constants.constants.frame_samples; frame_sample++) {

        vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        vec2 pixel_offset = vec2(random_float(payload.seed), random_float(payload.seed)) - vec2(0.5);
        if (frame_sample == 0) pixel_offset *= 0;
        vec2 ndc = ((pixel_center + pixel_offset) / vec2(gl_LaunchSizeEXT.xy)) * 2 - 1;
        ndc.y *= -1;

        // initialize payload
        ray_direction = compute_ray_direction(ndc);

        payload.color = vec3(0.0);
        payload.depth = 1;

        payload.origin = ray_origin;
        payload.direction = ray_direction;

        payload.contribution = vec3(1.0);
        payload.last_bsdf_pdf_inv = 0.0;


        traceRayEXT(
                as,
                0,
                0xff,
                0,
                push_constants.constants.sbt_stride,
                0,
                payload.origin,
                EPSILON,
                payload.direction,
                RAY_LEN_MAX,
                0
            );

        multisample_color += max(payload.color, vec3(0.0));
    }

    vec3 multisample_color_normalized = multisample_color / push_constants.constants.frame_samples;

    uint hit_instance = decode_uint(read_output(OUTPUT_BUFFER_INSTANCE, pixel_index).xyz);
    // RESTIR
    {
        Reservoir current_reservoir = restir_reservoirs[restir_index].reservoirs[pixel_index];
        clear_reservoir(current_reservoir);

        // initial restir sample generation
        for (uint restir_sample = 0; restir_sample < 8; restir_sample++) {
            uint restir_seed = hash_combine(random_uint(payload.seed), restir_sample);
            float p_hat = restir_p_hat(pixel_index, restir_seed);
            uint update_seed = random_uint(payload.seed);
            update_reservoir(current_reservoir, restir_seed, p_hat, update_seed);
        }

        uint restir_seed = current_reservoir.sample_seed;
        current_reservoir.weight = (1.0 / restir_p_hat(pixel_index, restir_seed)) * (current_reservoir.sum_weights / current_reservoir.num_samples);

        // evaluate visibility of initial samples
        uint initial_seed =  current_reservoir.sample_seed;
        LightSample light_sample = sample_direct_light(initial_seed, payload.primary_hit_position);
        rayQueryEXT ray_query;
        rayQueryInitializeEXT(ray_query, as, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, payload.primary_hit_position, EPSILON, light_sample.direction, light_sample.distance - 2.0 * EPSILON);
        rayQueryProceedEXT(ray_query);
        if (rayQueryGetIntersectionTypeEXT(ray_query, true) != gl_RayQueryCommittedIntersectionNoneEXT) {
            current_reservoir.weight = 0;
        }

        // temporal reuse
        Reservoir previous_reservoir = restir_reservoirs[restir_index_previous].reservoirs[pixel_index];
        uint temporal_seed = random_uint(payload.seed);
        current_reservoir = combine_reservoirs(pixel_index, current_reservoir, previous_reservoir, temporal_seed);        

        // ReSTIR contribution
        if (hit_instance != NULL_INSTANCE && (push_constants.constants.flags & ENABLE_RESTIR) == ENABLE_RESTIR) {
            Material material = get_material(hit_instance, payload.primary_hit_uv);

            uint nee_seed =  current_reservoir.sample_seed;
            LightSample light_sample = sample_direct_light(nee_seed, payload.primary_hit_position);

            vec3 normal = read_output(OUTPUT_BUFFER_NORMAL, pixel_index).xyz;

            mat3x3 shading_space = transpose(basis(normal));

            vec3 ray_dir_local = shading_space * ray_direction;
            vec3 light_dir_local = shading_space * -light_sample.direction;

            vec3 bsdf_eval = eval_bsdf(ray_dir_local, light_dir_local, material);

            vec3 restir_nee_contribution = bsdf_eval * (light_sample.weight) * abs(dot(light_sample.direction, normal)) * current_reservoir.weight;

            multisample_color_normalized = multisample_color_normalized + restir_nee_contribution;
            
        }

        restir_reservoirs[restir_index].reservoirs[pixel_index] = current_reservoir;
    }

    multisample_color_normalized = max(multisample_color_normalized, vec3(0.0));

    vec3 accumulated_color = output_buffers[OUTPUT_BUFFER_ACCUMULATED].color[pixel_index].rgb;
    if (sample_count == 1) {
        accumulated_color = multisample_color_normalized;
    } else {
        accumulated_color += multisample_color_normalized;
    }

    write_output(OUTPUT_BUFFER_ACCUMULATED, pixel_index, vec4(accumulated_color, 1.0));
    write_output(OUTPUT_BUFFER_RESULT, pixel_index, vec4(accumulated_color / sample_count * pow(2, push_constants.constants.exposure), 1.0));

    write_output(OUTPUT_BUFFER_RAY_DEPTH, pixel_index, vec4(vec3(float(payload.depth) / push_constants.constants.max_depth), 1.0));
}