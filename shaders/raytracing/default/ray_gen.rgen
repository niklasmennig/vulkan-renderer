#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_EXT_ray_flags_primitive_culling : enable
#extension GL_GOOGLE_include_directive : enable

#include "../common.glsl"
#include "../interface.glsl"
#include "payload.glsl"
#include "../random.glsl"
#include "../lights.glsl"
#include "../environment.glsl"
#include "../ggx.glsl"
#include "../restir.glsl"

layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = DESCRIPTOR_SET_FRAMEWORK, binding = DESCRIPTOR_BINDING_ACCELERATION_STRUCTURE) uniform accelerationStructureEXT as;
layout(set = DESCRIPTOR_SET_FRAMEWORK, binding = 1) uniform RayGenerationData {
    CameraData camera;
} raygen_data;
layout(set = DESCRIPTOR_SET_FRAMEWORK, binding = DESCRIPTOR_BINDING_OUTPUT_BUFFERS) buffer OutputBuffer { vec4 color[]; } output_buffers[];
layout(std430, set = DESCRIPTOR_SET_FRAMEWORK, binding = DESCRIPTOR_BINDING_LIGHTS) readonly buffer LightsData {Light[] lights;} lights_data;

layout(std430, push_constant) uniform PConstants {PushConstants constants;} push_constants;

layout(std430, set = DESCRIPTOR_SET_FRAMEWORK, binding = DESCRIPTOR_BINDING_RESTIR_RESERVOIRS) buffer ReSTIRReservoirBuffers {Reservoir reservoirs[];} restir_reservoirs[];

vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x = radians(raygen_data.camera.fov_x);

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y = fov_x * aspect_ratio;

    float fov_x_half = fov_x / 2.0;
    float fov_y_half = fov_y / 2.0;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}

LightSample sample_direct_light(inout uint seed, vec3 position) {
    LightSample light_sample;
    if (random_float(payload.seed) <= 0.0) {
        light_sample = sample_environment(payload.seed, push_constants.constants.environment_cdf_dimensions);
    } else {
        uint light_idx = uint(floor(push_constants.constants.light_count * random_float(payload.seed)));
        Light light = lights_data.lights[light_idx];
        light_sample = sample_light(position, payload.seed, light);
    }

    return light_sample;
}

void main() {
    uint sample_count = push_constants.constants.clear_accumulated;
    uint pixel_index = gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * push_constants.constants.image_extent.x;

    uint restir_index = sample_count % 2;

    payload.pixel_index = pixel_index;
    payload.restir_index = restir_index;

    vec3 ray_origin = raygen_data.camera.origin.xyz;

    vec3 multisample_color = vec3(0.0);

    for (uint frame_sample = 0; frame_sample < push_constants.constants.frame_samples; frame_sample++) {
        uint seed = hash_combine(gl_LaunchIDEXT.x, hash_combine(gl_LaunchIDEXT.y, hash_combine(push_constants.constants.clear_accumulated, frame_sample)));

        vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
        vec2 pixel_offset = vec2(random_float(seed), random_float(seed)) - vec2(0.5);
        vec2 ndc = ((pixel_center + pixel_offset) / vec2(gl_LaunchSizeEXT.xy)) * 2 - 1;
        ndc.y *= -1;

        // initialize payload
        vec3 ray_direction = compute_ray_direction(ndc);

        payload.color = vec3(0.0);
        payload.depth = 1;

        payload.origin = ray_origin;
        payload.direction = ray_direction;

        payload.contribution = vec3(1.0);

        payload.seed = seed;

        traceRayEXT(
                as,
                0,
                0xff,
                0,
                push_constants.constants.sbt_stride,
                0,
                payload.origin,
                EPSILON,
                payload.direction,
                RAY_LEN_MAX,
                0
            );

        multisample_color += clamp(payload.color, vec3(0.0), vec3(FLT_MAX));
    }

    vec3 multisample_color_normalized = multisample_color / float(push_constants.constants.frame_samples);

    // initial restir samples
    clear_reservoir(restir_reservoirs[restir_index].reservoirs[pixel_index]);
    for (uint restir_sample = 0; restir_sample < 8; restir_sample++) {
        uint restir_seed = random_uint(payload.seed);
        LightSample light_sample = sample_direct_light(restir_seed, payload.primary_hit_position);
        float p_hat = luminance(light_sample.intensity) * dot(light_sample.direction, payload.primary_hit_normal);
        update_reservoir(restir_reservoirs[restir_index].reservoirs[pixel_index], restir_seed, p_hat, payload.seed);
    }

    // temporal reuse
    // Reservoir previous = restir_reservoirs[restir_index].reservoirs[pixel_index];
    // clear_reservoir(restir_reservoirs[restir_index].reservoirs[pixel_index]);
    // update_reservoir(restir_reservoirs[restir_index].reservoirs[pixel_index], previous.light_index, )

    // ReSTIR contribution
    if (payload.primary_hit_instance != NULL_INSTANCE && (push_constants.constants.flags & ENABLE_RESTIR) == ENABLE_RESTIR) {
        Material material = get_material(payload.primary_hit_instance, payload.primary_hit_uv);

        uint nee_seed = restir_reservoirs[restir_index].reservoirs[pixel_index].sample_seed;
        LightSample light_sample = sample_direct_light(nee_seed, payload.primary_hit_position);
        vec3 light_direction = light_sample.direction;

        rayQueryEXT ray_query;
        rayQueryInitializeEXT(ray_query, as, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, payload.primary_hit_position, EPSILON, light_direction, light_sample.distance - 2.0 * EPSILON);
        rayQueryProceedEXT(ray_query);

        if (rayQueryGetIntersectionTypeEXT(ray_query, true) == gl_RayQueryCommittedIntersectionNoneEXT) {
            mat3x3 shading_space = transpose(basis(payload.primary_hit_normal));

            vec3 bsdf_eval = eval_ggx(shading_space * -normalize(payload.primary_hit_position - ray_origin), shading_space * -light_direction, material.base_color, material.opacity, material.metallic, material.fresnel, material.roughness, material.transmission, material.ior); 

            // vec3 restir_nee_contribution = bsdf_eval * restir_reservoirs[restir_index].reservoirs[pixel_index].y.light_intensity.rgb * clamp(dot(light_direction, payload.primary_hit_normal), 0, 1);
            vec3 restir_nee_contribution = light_sample.intensity * bsdf_eval;

            multisample_color_normalized = multisample_color_normalized + restir_nee_contribution;
        }
    }

    vec3 accumulated_color = output_buffers[OUTPUT_IMAGE_ACCUMULATED].color[pixel_index].rgb;
    if (sample_count <= 1) {
        accumulated_color = multisample_color_normalized;
    } else {
        accumulated_color += multisample_color_normalized;
    }
    output_buffers[OUTPUT_IMAGE_ACCUMULATED].color[pixel_index] = vec4(accumulated_color, 0.0);

    output_buffers[OUTPUT_IMAGE_RESULT].color[pixel_index] = vec4(accumulated_color / push_constants.constants.clear_accumulated * pow(2, push_constants.constants.exposure), 0.0);

    output_buffers[OUTPUT_IMAGE_ALBEDO].color[pixel_index] = vec4(payload.primary_hit_albedo, 1.0);
    output_buffers[OUTPUT_IMAGE_NORMAL].color[pixel_index] = vec4(payload.primary_hit_normal, 0.0);

    uint restir_seed = restir_reservoirs[restir_index].reservoirs[pixel_index].sample_seed;
    output_buffers[7].color[pixel_index] = vec4(random_vec3(restir_seed), 0.0);
}