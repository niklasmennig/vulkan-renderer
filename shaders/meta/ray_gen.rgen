#version 460 core
#extension GL_EXT_ray_tracing : enable

float epsilon = 0.00001f;
float ray_max = 10000.0f;

// taken from https://www.shadertoy.com/view/tlVczh
void basis(in vec3 n, out vec3 f, out vec3 r)
{
   //looks good but has this ugly branch
  if(n.z < -0.99995)
    {
        f = vec3(0 , -1, 0);
        r = vec3(-1, 0, 0);
    }
    else
    {
    	float a = 1./(1. + n.z);
    	float b = -n.x*n.y*a;
    	f = vec3(1. - n.x*n.x*a, b, -n.x);
    	r = vec3(b, 1. - n.y*n.y*a , -n.y);
    }
}
// taken from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83

float rand(float n){return fract(sin(n) * 43758.5453123);}

// float noise(float p){
// 	float fl = floor(p);
//     float fc = fract(p);
// 	return mix(rand(fl), rand(fl + 1.0), fc);
// }
	
// float noise(vec2 n) {
// 	const vec2 d = vec2(0.0, 1.0);
//     vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
// 	return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
// }
struct CameraData
{
    vec4 origin;
    vec4 forward;
    vec4 right;
    vec4 up;
    float fov_x;
};

struct RayPayload
{
    float hit_t;
    vec3 hit_position;
    vec3 hit_normal;
    vec2 hit_uv;
    uint hit_instance;
    uint hit_primitive;
};
layout(location = 0) rayPayloadEXT RayPayload payload;
layout(set = 0, binding = 0, rgba32f) uniform image2D img;
layout(set = 0, binding = 1) uniform accelerationStructureEXT as;
layout(set = 0, binding = 2) uniform RayGenerationData {
    CameraData camera;
} raygen_data;
layout(set = 1, binding = 7) uniform sampler2D tex[16];


vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x_half = radians(raygen_data.camera.fov_x) / 2.0;

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y_half = fov_x_half * aspect_ratio;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}

void main() {
    int multisampling = 1;

    vec3 final_color = vec3(0.0);
    
    for (int s = 0; s < multisampling; s++) {
        float ndc_x = (float(gl_LaunchIDEXT.x + rand(0.1 * s)) / float(gl_LaunchSizeEXT.x) - 0.5) * 2.0;
        float ndc_y = (float(gl_LaunchIDEXT.y + rand(0.2 * s)) / float(gl_LaunchSizeEXT.y) - 0.5) * 2.0;
        vec2 ndc = vec2(ndc_x, -ndc_y);


        int max_iterations = 5;
        int iteration = 0;

        // initialize path
        vec3 color = vec3(0.0, 0.0, 0.0);
        float contribution = 1.0;

        // initialize payload
        vec3 ray_origin = raygen_data.camera.origin.xyz;
        vec3 ray_direction = compute_ray_direction(ndc);
        payload.hit_t = 0;

        while (iteration < max_iterations && payload.hit_t >= 0) {
            traceRayEXT(
                as,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                ray_origin,
                epsilon,
                ray_direction,
                ray_max,
                0
            );

            if (payload.hit_t > epsilon) {
                vec3 surface_color = texture(tex[payload.hit_instance], payload.hit_uv).rgb;
                float cosine_term = max(0, dot(-ray_direction, payload.hit_normal));
                color += surface_color * cosine_term * contribution;
                contribution *= 0.2;

                ray_origin = payload.hit_position;
                vec3 t1, t2;
                basis(payload.hit_normal, t1, t2);
                vec3 reflection = normalize(rand(payload.hit_position.z) * payload.hit_normal + rand(payload.hit_position.x) * t1 + rand(payload.hit_position.y) * t2);
                ray_direction = reflection;

            }
            iteration++;
        }

        final_color += color;
    }

    imageStore(img, ivec2(gl_LaunchIDEXT.xy), vec4(final_color / multisampling, 1.0));
}