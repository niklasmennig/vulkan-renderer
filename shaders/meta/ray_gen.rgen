#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_flags_primitive_culling : enable


#define PI 3.1415926535897932384626433832795

float epsilon = 0.0001f;
float ray_max = 1000.0f;

uint max_depth = 10;

// taken from https://www.shadertoy.com/view/tlVczh
mat3 basis(in vec3 n)
{
    vec3 f, r;
   //looks good but has this ugly branch
  if(n.z < -0.99995)
    {
        f = vec3(0 , -1, 0);
        r = vec3(-1, 0, 0);
    }
    else
    {
    	float a = 1./(1. + n.z);
    	float b = -n.x*n.y*a;
    	f = vec3(1. - n.x*n.x*a, b, -n.x);
    	r = vec3(b, 1. - n.y*n.y*a , -n.y);
    }

    f = normalize(f);
    r = normalize(r);

    return mat3(f, r, n);
}

// https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color
float luminance(vec3 color) {
    return (0.299*color.r + 0.587*color.g + 0.114*color.b);
}
#line 5

struct CameraData
{
    vec4 origin;
    vec4 forward;
    vec4 right;
    vec4 up;
    float fov_x;
};

#line 6


layout(push_constant) uniform PushConstants {
    float time;
    uint clear_accumulated;
} push_constants;


// taken from https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
#define PI 3.1415926535897932384626433832795

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}

// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}

// Pseudo-random value in half-open range [0:1].

float seed_random( inout uint rnd ) { rnd = hash(rnd); return floatConstruct(rnd); }

vec3 random_vec3 (inout uint rnd) { return vec3(seed_random(rnd), seed_random(rnd), seed_random(rnd)); }
#line 14

struct RayPayload
{
    vec3 color;
    vec3 contribution;

    uint depth;
    uint seed;
};
#line 15
layout(location = 0) rayPayloadEXT RayPayload payload;

layout(set = 0, binding = 0, rgba32f) uniform image2D img;
layout(set = 0, binding = 1) uniform accelerationStructureEXT as;
layout(set = 0, binding = 2) uniform RayGenerationData {
    CameraData camera;
} raygen_data;


vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x_half = radians(raygen_data.camera.fov_x) / 2.0;

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y_half = fov_x_half * aspect_ratio;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}


void main() {
    uint seed = gl_LaunchIDEXT.x * 313 + gl_LaunchIDEXT.y * 12 + uint(push_constants.time) * 543 + push_constants.clear_accumulated * 78;

    vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 pixel_offset = vec2(seed_random(seed), seed_random(seed)) - vec2(0.5);

    vec2 ndc = ((pixel_center + pixel_offset) / vec2(gl_LaunchSizeEXT.xy)) * 2 - 1;
    ndc.y *= -1;

    // initialize payload
    vec3 ray_origin = raygen_data.camera.origin.xyz;
    vec3 ray_direction = compute_ray_direction(ndc);

    payload.color = vec3(0);
    payload.contribution = vec3(1);
    payload.depth = 0;
    payload.seed = seed;

    traceRayEXT(
                as,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                ray_origin,
                epsilon,
                ray_direction,
                ray_max,
                0
            );

    ivec2 img_coord = ivec2(gl_LaunchIDEXT.xy);
    uint sample_count = push_constants.clear_accumulated;
    vec3 color = clamp(payload.color, vec3(0,0,0), vec3(10,10,10));
    if (sample_count <= 0) {
        imageStore(img, img_coord, vec4(color, 1.0));
    } else {
        vec3 prev_color = imageLoad(img, img_coord).rgb;
        vec3 new_color = (prev_color * (sample_count) + color) / (sample_count + 1);
        imageStore(img, img_coord, vec4(new_color, 1.0));
    }

    
}