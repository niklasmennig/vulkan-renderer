#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_flags_primitive_culling : enable

precision highp float;


#define PI 3.1415926535897932384626433832795

float epsilon = 0.001f;
float ray_max = 1000.0f;

uint max_bounces = 6;


// taken from https://www.shadertoy.com/view/tlVczh
void basis(in vec3 n, out vec3 f, out vec3 r)
{
   //looks good but has this ugly branch
  if(n.z < -0.99995)
    {
        f = vec3(0.0 , -1.0, 0.0);
        r = vec3(-1.0, 0.0, 0.0);
    }
    else
    {
    	float a = 1.0/(1.0 + n.z);
    	float b = -n.x*n.y*a;
    	f = vec3(1.0 - n.x*n.x*a, b, -n.x);
    	r = vec3(b, 1.0 - n.y*n.y*a , -n.y);
    }

    f = normalize(f);
    r = normalize(r);
}


struct CameraData
{
    vec4 origin;
    vec4 forward;
    vec4 right;
    vec4 up;
    float fov_x;
};


layout(push_constant) uniform PushConstants {
    float time;
    int clear_accumulated;
} push_constants;


// taken from https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
#define PI 3.1415926535897932384626433832795

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}


// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }



// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}



// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float seed_random( inout float rnd ) { float val = random(rnd * 3311.432); rnd = val; return val; }
struct RayPayload
{
    // ray data
    uint depth;
    float seed;
    bool hit;
    
    // hit data
    uint instance;
    vec3 position;
    vec3 normal;
    vec2 uv;
};


struct MaterialPayload
{
    // ray data
    float seed;

    // hit data
    uint instance;
    vec3 position;
    vec3 normal;
    vec2 uv;

    // output data
    vec3 emission;
    vec3 surface_color;
    vec3 direction;
};layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 0) callableDataEXT MaterialPayload material_payload;

layout(set = 0, binding = 0, rgba32f) uniform image2D img;
layout(set = 0, binding = 1) uniform accelerationStructureEXT as;
layout(set = 0, binding = 2) uniform RayGenerationData {
    CameraData camera;
} raygen_data;


void trace(vec3 origin, vec3 direction) {
     traceRayEXT(
                as,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                origin,
                epsilon,
                direction,
                ray_max,
                0
            );
}


vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x_half = radians(raygen_data.camera.fov_x) / 2.0;

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y_half = fov_x_half * aspect_ratio;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}


void main() {

    vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 ndc = (pixel_center / vec2(gl_LaunchSizeEXT.xy)) * 2 - 1;
    ndc.y *= -1;


    int max_iterations = 6;

    // initialize path
    vec3 color = vec3(0.0, 0.0, 0.0);
    vec3 contribution = vec3(1);

    // initialize payload
    vec3 ray_origin = raygen_data.camera.origin.xyz;
    vec3 ray_direction = compute_ray_direction(ndc);
    
    payload.seed = random(vec4(gl_LaunchIDEXT.x * 135.2131, gl_LaunchIDEXT.y * 465.354, push_constants.time * 1.251431, push_constants.clear_accumulated * 0.24644545));

    for (int iteration = 0; iteration < max_iterations; iteration++) {
        trace(ray_origin, ray_direction);

        if (payload.hit) {
            // prepare material call
            material_payload.instance = payload.instance;
            material_payload.position = payload.position;
            material_payload.direction = ray_direction;
            material_payload.normal = payload.normal;
            material_payload.uv = payload.uv;
            material_payload.seed = payload.seed;

            executeCallableEXT(0,0);

            ray_origin = material_payload.position;
            ray_direction = material_payload.direction;
        } else {
            iteration = max_iterations;

            material_payload.emission = vec3(0);
            material_payload.surface_color = vec3(0);
        }

        float cosine_term = max(0, dot(ray_direction, -payload.normal));
        vec3 radiance = material_payload.surface_color;

        contribution *= radiance;
        color += contribution * material_payload.emission;
    }

    ivec2 img_coord = ivec2(gl_LaunchIDEXT.xy);
    vec3 old_pixel = imageLoad(img, img_coord).rgb;

    vec3 frame_color = color;
    int frame_number = (-push_constants.clear_accumulated);
    if (push_constants.clear_accumulated <= 0) frame_color = ((old_pixel * frame_number) + color) / (frame_number + 1);

    imageStore(img, img_coord, vec4(frame_color, 1.0));
}