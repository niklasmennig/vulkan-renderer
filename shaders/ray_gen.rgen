#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_flags_primitive_culling : enable

precision highp float;

~include "shaders/common.glsl"


~include "shaders/camera.glsl"


layout(push_constant) uniform PushConstants {
    float time;
    int clear_accumulated;
} push_constants;

~include "shaders/random.glsl"
~include "shaders/payload.glsl"
layout(location = 0) rayPayloadEXT RayPayload payload;
layout(location = 0) callableDataEXT MaterialPayload material_payload;

layout(set = 0, binding = 0, rgba32f) uniform image2D img;
layout(set = 0, binding = 1) uniform accelerationStructureEXT as;
layout(set = 0, binding = 2) uniform RayGenerationData {
    CameraData camera;
} raygen_data;

layout(set = 1, binding = 10) readonly buffer MaterialIndexData {uint data[];} material_indices;


void trace(vec3 origin, vec3 direction) {
     traceRayEXT(
                as,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                origin,
                epsilon,
                direction,
                ray_max,
                0
            );
}


vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x_half = radians(raygen_data.camera.fov_x) / 2.0;

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y_half = fov_x_half * aspect_ratio;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}


void main() {
    float seed = random(vec4(gl_LaunchIDEXT.x * 135.2131, gl_LaunchIDEXT.y * 465.354, push_constants.time * 1.251431, push_constants.clear_accumulated * 0.24644545));

    vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    vec2 pixel_offset = vec2(seed_random(seed), seed_random(seed)) - vec2(0.5);

    vec2 ndc = ((pixel_center + pixel_offset) / vec2(gl_LaunchSizeEXT.xy)) * 2 - 1;
    ndc.y *= -1;


    int max_iterations = 6;

    // initialize path
    vec3 color = vec3(0.0, 0.0, 0.0);
    vec3 contribution = vec3(1);

    // initialize payload
    vec3 ray_origin = raygen_data.camera.origin.xyz;
    vec3 ray_direction = compute_ray_direction(ndc);
    
    payload.seed = seed;

    for (int iteration = 0; iteration < max_iterations; iteration++) {
        if (length(ray_direction) < epsilon) break;

        trace(ray_origin, ray_direction);
        float cosine_term = max(0, dot(-ray_direction, payload.normal));

        if (payload.hit) {
            // prepare material call
            material_payload.instance = payload.instance;
            material_payload.position = payload.position;
            material_payload.direction = ray_direction;
            material_payload.normal = payload.normal;
            material_payload.uv = payload.uv;
            material_payload.seed = payload.seed;

            uint material_id = material_indices.data[payload.instance];
            executeCallableEXT(material_id,0);

            ray_origin = material_payload.position;
            ray_direction = material_payload.direction;
        } else {
            iteration = max_iterations;

            material_payload.emission = vec3(0);
            material_payload.surface_color = vec3(0);
        }

        vec3 radiance = material_payload.surface_color * cosine_term;

        contribution *= radiance;
        color += contribution * material_payload.emission;
    }

    ivec2 img_coord = ivec2(gl_LaunchIDEXT.xy);
    vec3 old_pixel = imageLoad(img, img_coord).rgb;

    vec3 frame_color = color;
    int frame_number = (-push_constants.clear_accumulated);
    if (push_constants.clear_accumulated <= 0) frame_color = ((old_pixel * frame_number) + color) / (frame_number + 1);

    imageStore(img, img_coord, vec4(frame_color, 1.0));
}