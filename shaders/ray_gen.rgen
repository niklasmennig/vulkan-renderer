#version 460 core
#extension GL_EXT_ray_tracing : enable

~include "shaders/common.glsl"

~include "shaders/random.glsl"

~include "shaders/camera.glsl"

~include "shaders/payload.glsl"

layout(push_constant) uniform PushConstants {
    float time;
    uint clear_accumulated;
} push_constants;

layout(location = 0) rayPayloadEXT RayPayload payload;
layout(set = 0, binding = 0, rgba32f) uniform image2D img;
layout(set = 0, binding = 1) uniform accelerationStructureEXT as;
layout(set = 0, binding = 2) uniform RayGenerationData {
    CameraData camera;
} raygen_data;
layout(set = 1, binding = 8) uniform sampler2D tex[16];
layout(set = 1, binding = 9) readonly buffer TextureIndexData {uint data[];} texture_indices;


void trace(vec3 origin, vec3 direction) {
     traceRayEXT(
                as,
                gl_RayFlagsOpaqueEXT,
                0xff,
                0,
                0,
                0,
                origin,
                epsilon,
                direction,
                ray_max,
                0
            );
}


vec3 compute_ray_direction(vec2 ndc) {
    vec3 right = raygen_data.camera.right.xyz;
    vec3 up = raygen_data.camera.up.xyz;
    vec3 forward = raygen_data.camera.forward.xyz;

    float fov_x_half = radians(raygen_data.camera.fov_x) / 2.0;

    float aspect_ratio = float(gl_LaunchSizeEXT.y) / float(gl_LaunchSizeEXT.x);
    float fov_y_half = fov_x_half * aspect_ratio;

    vec3 dir = normalize(forward) + ndc.x * abs(tan(fov_x_half)) * normalize(right) + ndc.y * abs(tan(fov_y_half)) * normalize(up);
    return normalize(dir);
}

vec3 cosine_weighted_sample_hemisphere(float u1, float u2)
{
    // Sample two random values in the range [0,1)
    float r = sqrt(1.0 - u1*u1);
    float phi = 2.0 * PI * u2;

    // Compute the direction vector using polar coordinates
    float x = r * cos(phi);
    float y = r * sin(phi);
    float z = sqrt(u2);

    return vec3(x, y, z);
}


void main() {
    int multisampling = 4;

    vec3 final_color = vec3(0.0);
    
    for (int s = 0; s < multisampling; s++) {
        float ndc_x = ((float(gl_LaunchIDEXT.x) + rand(push_constants.time)) / float(gl_LaunchSizeEXT.x) - 0.5) * 2.0;
        float ndc_y = ((float(gl_LaunchIDEXT.y) + rand(push_constants.time)) / float(gl_LaunchSizeEXT.y) - 0.5) * 2.0;
        vec2 ndc = vec2(ndc_x, -ndc_y);


        int max_iterations = 5;
        int iteration = 0;

        // initialize path
        vec3 color = vec3(0.0, 0.0, 0.0);
        float contribution = 1.0;

        // initialize payload
        vec3 ray_origin = raygen_data.camera.origin.xyz;
        vec3 ray_direction = compute_ray_direction(ndc);
        payload.hit_t = 0;

        while (iteration < max_iterations && payload.hit_t >= 0) {
            trace(ray_origin, ray_direction);

            if (payload.hit_t > epsilon) {
                vec3 surface_color = texture(tex[texture_indices.data[payload.hit_instance]], payload.hit_uv).rgb;
                //surface_color = vec3(1,0,0);
                float cosine_term = max(0, dot(-ray_direction, payload.hit_normal));

                ray_origin = payload.hit_position;
                
                vec3 t1, t2;
                basis(payload.hit_normal, t1, t2);

                //vec3 sample_dir = cosine_weighted_sample_hemisphere(rand(push_constants.time), rand(push_constants.time));
                //ray_direction = sample_dir.x * t1 + sample_dir.y * t2 + sample_dir.z * payload.hit_normal;
                ray_direction = reflect(ray_direction, payload.hit_normal);

                color += surface_color * cosine_term * contribution;
                contribution *= 0.5;
            }
            iteration++;
        }

        final_color += color;
    }

    ivec2 img_coord = ivec2(gl_LaunchIDEXT.xy);

    vec3 old_pixel = imageLoad(img, img_coord).rgb;

    if (push_constants.clear_accumulated > 0) old_pixel = vec3(0.0);

    vec3 frame_color = final_color / multisampling;
    imageStore(img, img_coord, vec4(max(frame_color, old_pixel), 1.0));
}